const utils = require('./utils');
const { ValidationResult } = require('./validation-result');

class ValidatorInternalState {

    #name;
    #mode;
    #contextValue;
    #contextValuePath;
    #contextValueCurrentPath;
    #errorPrefix;
    #errorBasePath;
    #errorContextPaths;
    #validationResult;

    constructor(name) {
        this.#name = name;
    }

    _init(mode, contextValue, contextValuePath, contextValueCurrentPath, errorPrefix, errorBasePath, errorContextPaths, validationResult) {
        this.#mode = mode;
        this.#contextValue = contextValue;
        this.#contextValuePath = contextValuePath;
        this.#contextValueCurrentPath = contextValueCurrentPath;
        this.#errorPrefix = errorPrefix;
        this.#errorBasePath = errorBasePath;
        this.#errorContextPaths = errorContextPaths;
        this.#validationResult = validationResult;
    }

    get mode() {
        return this.#mode;
    }

    get contextValue() {
        return this.#contextValue;
    }

    get contextValuePath() {
        return this.#contextValuePath;
    }

    get contextValueCurrentPath() {
        return this.#contextValueCurrentPath;
    }

    get errorPrefix() {
        return this.#errorPrefix;
    }

    get errorBasePath() {
        return this.#errorBasePath;
    }

    get errorContextPaths() {
        return this.#errorContextPaths;
    }

    /**
     * Get the errorContextValuePaths for this validator context.
     * Even though only one contextPath can exist for a validator context it
     * can still have multiple errorContextValuePaths because errorContextPaths allows multiple
     * paths to be set. So if multiple errorContextPaths is set multiple errorContextValuePaths will be produced
     * and should all be added as failed paths in the case of the validation context failing.
     * @returns {string[]} the contextValuePath prefixed with errorBasePath (if set) and post-fixed with errorContextPaths (if set)
     */
    get errorContextValuePaths() {
        let paths = [];
        if (this.#errorContextPaths === undefined) {
            paths.push(utils.joinPropPaths(this.#errorBasePath, this.#contextValuePath));
        } else {
            for (let errorContextPath of this.#errorContextPaths) {
                paths.push(utils.joinPropPaths(this.#errorBasePath, this.#contextValuePath, errorContextPath))
            }
        }
        return paths;
    }

    /**
     * @returns {ValidationResult}
     */
    get validationResult() {
        return this.#validationResult;
    }

    getFullErrorMessage(errorMessage) {
        let fullMessage = errorMessage;
        if (this.#errorPrefix) {
            fullMessage = `${this.#errorPrefix} ${errorMessage}`;
        }
        return fullMessage;
    }

    /**
     * @param {ValidatorInternalState} dest the dest to clone to
     * @param {string} contextValue the contextValue for the clone
     * @param {string} [contextValuePath] the contextValuePath for the clone, if <code>undefined</code> the contextValuePath from this instance will be used
     * @param {string} [contextValueCurrentPath] the contextValueCurrentPath for the clone, if <code>undefined</code> the contextValueCurrentPath from this instance will be used
     * @param {string[]} [errorContextPaths] add one or more additional context paths to the errorContextValuePaths generated by this validator and sub validators, if <code>undefined</code> the errorContextValuePaths from this instance will be used
     * @returns {ValidatorInternalState}
     */
    cloneWith(dest, contextValue, contextValuePath, contextValueCurrentPath, errorContextPaths) {
        contextValuePath = contextValuePath === undefined ? this.#contextValuePath : contextValuePath;
        contextValueCurrentPath = contextValueCurrentPath === undefined ? this.#contextValueCurrentPath : contextValueCurrentPath;
        errorContextPaths = errorContextPaths === undefined ? this.#errorContextPaths : errorContextPaths;
        dest._init(this.mode, contextValue, contextValuePath, contextValueCurrentPath, this.errorPrefix, this.errorBasePath, errorContextPaths, this.validationResult);
        return dest;
    }

}

module.exports = { ValidatorInternalState };